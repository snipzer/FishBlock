<?php

namespace MainBundle\Repository;

use MainBundle\Entity\Critic;

/**
 * CriticRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CriticRepository extends \Doctrine\ORM\EntityRepository
{
    public function getCriticByCriticId($criticId)
    {
        return $this->findOneBy(["id" => $criticId]);
    }

    public function postCritic($title, $content, $note, $userId, $serieId)
    {
        $user = $this->getEntityManager()->getRepository("MainBundle:User")->getUserById($userId);
        $serie = $this->getEntityManager()->getRepository("MainBundle:Serie")->getSerieWithId($serieId);

        $critic = new Critic();
        $critic->setTitle($title)
            ->setContent($content)
            ->setSerie($serie)
            ->setIsValid(true)
            ->setUser($user)
            ->setNote($note);

        $this->getEntityManager()->persist($critic);
        $this->getEntityManager()->flush();

        return $critic;
    }

    public function getCriticsFromSerie($serieId)
    {
        $serie = $this->getEntityManager()->getRepository("MainBundle:Serie")->getSerieWithId($serieId);

        return $this->getEntityManager()->createQueryBuilder()
            ->select("c")
            ->from("MainBundle:Critic", "c")
            ->where("c.serie = :id")
            ->setParameter(":id", $serie)
            ->getQuery()->getResult();
    }

    // Récupère les dernières critique publier qui sont valider
    public function getLastUploadedAndValidatedCritics()
    {
        return $this->getEntityManager()->createQuery(
            'SELECT c
              FROM MainBundle\Entity\Critic c
              WHERE c.isValid = true
              ORDER BY c.postedThe DESC'
        )->setMaxResults(5)->getResult();
    }

    public function getLastUploadedAndValidatedCriticFromSerie($serie)
    {
        return $this->getEntityManager()->createQuery(
            'SELECT c
              FROM MainBundle\Entity\Critic c
              WHERE c.isValid = true AND c.serie = :serie
              ORDER BY c.postedThe DESC'
        )->setParameter(":serie", $serie)->setMaxResults(1)->getResult();
    }

    // Supprime une critique
    public function deleteCritic($criticId)
    {
        $critic = $this->findOneBy(["id" => $criticId]);

        $this->getEntityManager()->remove($critic);
        $this->getEntityManager()->flush();
    }

    // Valide une critique
    public function validCritic($criticId)
    {
        $critic = $this->findOneBy(["id" => $criticId]);

        $critic->setIsValid(true);

        $this->getEntityManager()->persist($critic);
        $this->getEntityManager()->flush();
    }

    // Renvois toutes les critiques valider pour une série
    public function getValidatedCriticsFromSerie($serieId)
    {
        $serie = $this->getEntityManager()->getRepository("MainBundle:Serie")->getSerieWithId($serieId);

        return $this->getEntityManager()->createQueryBuilder()
            ->select("c")
            ->from("MainBundle:Critic", "c")
            ->where("c.serie = :serie")
            ->andWhere("c.isValid = true")
            ->orderBy("c.postedThe", "DESC")
            ->setParameter(":serie", $serie)
            ->getQuery()
            ->getResult();
    }

    // Renvois toutes les critiques non valider pour une série
    public function getNonValidatedCriticFromSerie($serieId)
    {
        $serie = $this->getEntityManager()->getRepository("MainBundle:Serie")->getSerieWithId($serieId);

        return $this->getEntityManager()->createQueryBuilder()
            ->select("c")
            ->from("MainBundle:Critic", "c")
            ->where("c.serie = :id")
            ->andWhere("c.isValid = false")
            ->setParameter(":id", $serie)
            ->getQuery()->getResult();
    }

    public function getValidatedCritics()
    {
        return $this->getEntityManager()->createQueryBuilder()
            ->select("c")
            ->from("MainBundle:Critic", "c")
            ->where("c.isValid = true")
            ->getQuery()->getResult();
    }

    public function getPopularSerie()
    {
        $validatedCritics = $this->getValidatedCritics();

        $array = [];

        foreach($validatedCritics as $validatedCritic)
        {
            $idSerie = $validatedCritic->getSerie()->getId()->__toString();

            if(is_string($idSerie))
            {
                if(array_key_exists($idSerie, $array))
                    $array[$idSerie]++;

                $array[$idSerie] = 1;
            }
        }

        asort($array);

        $result = [];
        foreach($array as $key => $value)
        {
            $serie = $this->getEntityManager()->getRepository("MainBundle:Serie")->getSerieWithId($key);

            $result[] = $serie;
        }

        return $result;
    }

    public function TempFakeCritic($userId1, $userId2)
    {
        $series = $this->getEntityManager()->getRepository("MainBundle:Serie")->getSeries();

        foreach($series as $serie)
        {
            for($i = 0; $i < 10; $i++)
            {
                if($i%2 === 0)
                    $userId = $userId1;
                else
                    $userId = $userId2;


                $array = [
                    "title" => "Title ".$i,
                    "content" => "Tolkien ipsum uilos lanthir taniquetil gwaihir mardil. Lameth elendil yavanna pelargir celon bandobras thalion formenos treebeard curunir.",
                    "note" => 5,
                    "userId" => $userId,
                    "serieId" => $serie->getId()->__toString()
                ];

                $critic = $this->postCritic($array["title"], $array["content"], $array["note"], $array["userId"], $array["serieId"]);

                if(rand(0, 100) > 60)
                {
                    $critic->setIsValid(true);
                    $this->getEntityManager()->persist($critic);
                    $this->getEntityManager()->flush();
                }

                $this->getEntityManager()->getRepository("MainBundle:CriticNotation")->addNotation($critic->getId()->__toString(), $userId, true);
            }
        }
    }
}
